# -> UNKNOWN
include -> IDENTIFIER
< -> LESS
stdio -> IDENTIFIER
. -> UNKNOWN
h -> IDENTIFIER
> -> GREATER
int -> KEYWORD
main -> IDENTIFIER
( -> LEFT_PAREN
) -> RIGHT_PAREN
{ -> LEFT_BRACE
int -> KEYWORD
num -> IDENTIFIER
, -> COMMA
i -> IDENTIFIER
, -> COMMA
isPrime -> IDENTIFIER
= -> ASSIGN
1 -> NUMBER
; -> SEMICOLON
printf -> FUNCTION
( -> LEFT_PAREN
" -> UNKNOWN
Enter -> IDENTIFIER
a -> IDENTIFIER
number -> IDENTIFIER
: -> UNKNOWN
" -> UNKNOWN
) -> RIGHT_PAREN
; -> SEMICOLON
scanf -> FUNCTION
( -> LEFT_PAREN
" -> UNKNOWN
% -> MODULO
d -> IDENTIFIER
" -> UNKNOWN
, -> COMMA
& -> UNKNOWN
num -> IDENTIFIER
) -> RIGHT_PAREN
; -> SEMICOLON
if -> KEYWORD
( -> LEFT_PAREN
num -> IDENTIFIER
<= -> LESS_EQUAL
1 -> NUMBER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
isPrime -> IDENTIFIER
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
} -> RIGHT_BRACE
else -> KEYWORD
{ -> LEFT_BRACE
for -> KEYWORD
( -> LEFT_PAREN
i -> IDENTIFIER
= -> ASSIGN
2 -> NUMBER
; -> SEMICOLON
i -> IDENTIFIER
<= -> LESS_EQUAL
num -> IDENTIFIER
/ -> DIVIDE
2 -> NUMBER
; -> SEMICOLON
i -> IDENTIFIER
+ -> ADD
+ -> ADD
) -> RIGHT_PAREN
{ -> LEFT_BRACE
if -> KEYWORD
( -> LEFT_PAREN
num -> IDENTIFIER
% -> MODULO
i -> IDENTIFIER
= -> ASSIGN
= -> ASSIGN
0 -> NUMBER
) -> RIGHT_PAREN
{ -> LEFT_BRACE
isPrime -> IDENTIFIER
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
break -> KEYWORD
; -> SEMICOLON
} -> RIGHT_BRACE
} -> RIGHT_BRACE
} -> RIGHT_BRACE
if -> KEYWORD
( -> LEFT_PAREN
isPrime -> IDENTIFIER
) -> RIGHT_PAREN
printf -> FUNCTION
( -> LEFT_PAREN
" -> UNKNOWN
% -> MODULO
d -> IDENTIFIER
is -> IDENTIFIER
a -> IDENTIFIER
prime -> IDENTIFIER
number -> IDENTIFIER
. -> UNKNOWN
\ -> UNKNOWN
n -> IDENTIFIER
" -> UNKNOWN
, -> COMMA
num -> IDENTIFIER
) -> RIGHT_PAREN
; -> SEMICOLON
else -> KEYWORD
printf -> FUNCTION
( -> LEFT_PAREN
" -> UNKNOWN
% -> MODULO
d -> IDENTIFIER
is -> IDENTIFIER
not -> IDENTIFIER
a -> IDENTIFIER
prime -> IDENTIFIER
number -> IDENTIFIER
. -> UNKNOWN
\ -> UNKNOWN
n -> IDENTIFIER
" -> UNKNOWN
, -> COMMA
num -> IDENTIFIER
) -> RIGHT_PAREN
; -> SEMICOLON
return -> KEYWORD
0 -> NUMBER
; -> SEMICOLON
} -> RIGHT_BRACE
